// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.11.0 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	openapi_types "github.com/deepmap/oapi-codegen/pkg/types"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// Defines values for NotificationStatus.
const (
	Created NotificationStatus = "created"
	Denied  NotificationStatus = "denied"
)

// AccountResponse defines model for account-response.
type AccountResponse struct {
	Age      *int32  `json:"age,omitempty"`
	Document *string `json:"document,omitempty"`
	Id       *string `json:"id,omitempty"`
	LastName *string `json:"last_name,omitempty"`
	Name     *string `json:"name,omitempty"`
}

// CardResponse defines model for card-response.
type CardResponse struct {
	Id         *string `json:"id,omitempty"`
	LastDigits *string `json:"last_digits,omitempty"`
	Status     *string `json:"status,omitempty"`
}

// CardId defines model for card_id.
type CardId = string

// CreateAccountRequest defines model for create-account-request.
type CreateAccountRequest struct {
	PersonalData struct {
		Address *struct {
			Number  string `json:"number"`
			ZipCode string `json:"zip_code"`
		} `json:"address,omitempty"`
		BirthDate  openapi_types.Date `json:"birth_date"`
		Document   string             `json:"document"`
		LastName   string             `json:"last_name"`
		MotherName string             `json:"mother_name"`
		Name       string             `json:"name"`
		Phone      *struct {
			Code   string `json:"code"`
			Number string `json:"number"`
		} `json:"phone,omitempty"`
	} `json:"personal_data"`
}

// CreateAccountResponse defines model for create-account-response.
type CreateAccountResponse struct {
	Id     *string `json:"id,omitempty"`
	Status *string `json:"status,omitempty"`
}

// CreateCardRequest defines model for create-card-request.
type CreateCardRequest struct {
	Name string `json:"name"`
}

// CreateCardResponse defines model for create-card-response.
type CreateCardResponse struct {
	Id *string `json:"id,omitempty"`
}

// Error4xxResponse defines model for error-4xx-response.
type Error4xxResponse struct {
	Code        string `json:"code"`
	Description string `json:"description"`
}

// Error5xxResponse defines model for error-5xx-response.
type Error5xxResponse struct {
	Code        string `json:"code"`
	Description string `json:"description"`
}

// Notification defines model for notification.
type Notification struct {
	CardId CardId             `json:"card_id"`
	Status NotificationStatus `json:"status"`
}

// NotificationStatus defines model for Notification.Status.
type NotificationStatus string

// CreateAccountJSONBody defines parameters for CreateAccount.
type CreateAccountJSONBody = CreateAccountRequest

// CreateCardsJSONBody defines parameters for CreateCards.
type CreateCardsJSONBody = CreateCardRequest

// PostCardsIdSubscribeJSONBody defines parameters for PostCardsIdSubscribe.
type PostCardsIdSubscribeJSONBody struct {
	Token string `json:"token"`
	Url   string `json:"url"`
}

// CreateAccountJSONRequestBody defines body for CreateAccount for application/json ContentType.
type CreateAccountJSONRequestBody = CreateAccountJSONBody

// CreateCardsJSONRequestBody defines body for CreateCards for application/json ContentType.
type CreateCardsJSONRequestBody = CreateCardsJSONBody

// PostCardsIdSubscribeJSONRequestBody defines body for PostCardsIdSubscribe for application/json ContentType.
type PostCardsIdSubscribeJSONRequestBody PostCardsIdSubscribeJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// It creates accounts
	// (POST /accounts)
	CreateAccount(ctx echo.Context) error
	// Get account details
	// (GET /accounts/{id})
	GetAccount(ctx echo.Context, id CardId) error
	// It creates cards
	// (POST /accounts/{id}/cards)
	CreateCards(ctx echo.Context, id CardId) error

	// (DELETE /cards/{id})
	DeleteCard(ctx echo.Context, id CardId) error
	// Get card details
	// (GET /cards/{id})
	GetCard(ctx echo.Context, id CardId) error
	// Subscribe to notifications about given card
	// (POST /cards/{id}/subscribe)
	PostCardsIdSubscribe(ctx echo.Context, id CardId) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// CreateAccount converts echo context to params.
func (w *ServerInterfaceWrapper) CreateAccount(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateAccount(ctx)
	return err
}

// GetAccount converts echo context to params.
func (w *ServerInterfaceWrapper) GetAccount(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id CardId

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetAccount(ctx, id)
	return err
}

// CreateCards converts echo context to params.
func (w *ServerInterfaceWrapper) CreateCards(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id CardId

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateCards(ctx, id)
	return err
}

// DeleteCard converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteCard(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id CardId

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteCard(ctx, id)
	return err
}

// GetCard converts echo context to params.
func (w *ServerInterfaceWrapper) GetCard(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id CardId

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetCard(ctx, id)
	return err
}

// PostCardsIdSubscribe converts echo context to params.
func (w *ServerInterfaceWrapper) PostCardsIdSubscribe(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id CardId

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostCardsIdSubscribe(ctx, id)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.POST(baseURL+"/accounts", wrapper.CreateAccount)
	router.GET(baseURL+"/accounts/:id", wrapper.GetAccount)
	router.POST(baseURL+"/accounts/:id/cards", wrapper.CreateCards)
	router.DELETE(baseURL+"/cards/:id", wrapper.DeleteCard)
	router.GET(baseURL+"/cards/:id", wrapper.GetCard)
	router.POST(baseURL+"/cards/:id/subscribe", wrapper.PostCardsIdSubscribe)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
