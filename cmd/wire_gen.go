// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"github.com/modern-apis-architecture/banklo-cards-issuer/internal/adapter"
	"github.com/modern-apis-architecture/banklo-cards-issuer/internal/domain/accounts/service"
	service2 "github.com/modern-apis-architecture/banklo-cards-issuer/internal/domain/cards/service"
	service3 "github.com/modern-apis-architecture/banklo-cards-issuer/internal/domain/subscriptions/service"
	"github.com/modern-apis-architecture/banklo-cards-issuer/internal/storage/mongo"
	"github.com/modern-apis-architecture/banklo-cards-issuer/internal/storage/mongo/accounts"
	"github.com/modern-apis-architecture/banklo-cards-issuer/internal/storage/mongo/cards"
	"github.com/modern-apis-architecture/banklo-cards-issuer/internal/storage/mongo/subscriptions"
)

// Injectors from wire.go:

func buildAppContainer() (*adapter.HttpAdapter, error) {
	database, err := mongo.NewDatabase()
	if err != nil {
		return nil, err
	}
	accountCollection, err := mongo.ProvideAccountCollection(database)
	if err != nil {
		return nil, err
	}
	mongoAccountRepository := accounts.NewMongoAccountRepository(accountCollection)
	accountService := service.NewAccountService(mongoAccountRepository)
	cardCollection, err := mongo.ProvideCardCollection(database)
	if err != nil {
		return nil, err
	}
	mongoCardRepository := cards.NewMongoCardRepository(cardCollection)
	cardService := service2.NewCardService(mongoCardRepository, mongoAccountRepository)
	subscriptionCollection, err := mongo.ProvideSubscriptionCollection(database)
	if err != nil {
		return nil, err
	}
	mongoSubscriptionRepository := subscriptions.NewMongoSubscriptionRepository(subscriptionCollection)
	subscriptionService := service3.NewSubscriptionService(mongoSubscriptionRepository)
	httpAdapter := adapter.NewHttpAdapter(accountService, cardService, subscriptionService)
	return httpAdapter, nil
}
